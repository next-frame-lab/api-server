name: Java CI with Gradle

# 워크플로우가 언제 실행될지를 정의합니다.
on:
  # main 또는 develop 브랜치에 push 이벤트가 발생했을 때 실행됩니다.
  push:
    branches: [ "main", "develop" ]
  # main, develop, release, hotfix 브랜치 대상으로 pull request 이벤트가 발생했을 때 실행됩니다.
  pull_request:
    branches: [ "main", "develop", "release/*", "hotfix/*" ]

# 워크플로우 실행 시 Gradle 빌드에 대한 권한을 설정합니다.
permissions:
  contents: read

# 실행될 작업(job)들을 정의합니다. 이 워크 플로우는 'build'라는 단일 작업으로 구성됩니다.
jobs:
  build:
    # 작업이 실행될 가상 환경을 지정합니다.
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: testdb
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpassword
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    # 작업 내에서 순차적으로 실행될 단계(step)를 정의합니다.
    steps:
      # 1. 'actions/checkout' 액션을 사용하여 현재 레포지토리의 코드를 가상 환경으로 내려받습니다.
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. 'actions/setup-java' 액션을 사용하여 JDK 21을 설정합니다.
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      # 3. gradlew 스크립트에 실행 권한을 부여합니다.
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      # 4. 각 모듈의 설정 파일을 Secret 값으로 생성합니다.
      - name: Create configuration files for payment module
        run: |
          mkdir -p ./payment/src/main/resources
          echo "${{ secrets.PAYMENT_APPLICATION_YML }}" > ./payment/src/main/resources/application.yml
          echo "${{ secrets.PAYMENT_APPLICATION_DEV_YML }}" > ./payment/src/main/resources/application-dev.yml
          echo "${{ secrets.PAYMENT_APPLICATION_DEV_DB_YML }}" > ./payment/src/main/resources/application-dev-db.yml
      
      - name: Create configuration files for schedule-reservation-ticketing module
        run: |
          mkdir -p ./schedule-reservation-ticketing/src/main/resources
          echo "${{ secrets.SRT_APPLICATION_YML }}" > ./schedule-reservation-ticketing/src/main/resources/application.yml
          echo "${{ secrets.SRT_APPLICATION_DEV_MAIL_YML }}" > ./schedule-reservation-ticketing/src/main/resources/application-dev-mail.yml

      - name: Validate YAML files
        run: |
          for file in $(find . -name "*.yml"); do
            echo "Validating $file ..."
            python3 -c "import yaml, sys; yaml.safe_load(open('$file'))" || exit 1
          done


      # 5. Gradle을 사용하여 프로젝트를 빌드하고 테스트를 실행합니다.
      - name: Build and test modules with Gradle
        env:
          SPRING_PROFILES_ACTIVE: dev
          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/testdb
          SPRING_DATASOURCE_USERNAME: testuser
          SPRING_DATASOURCE_PASSWORD: testpassword
          SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT: org.hibernate.dialect.PostgreSQLDialect
        run: ./gradlew clean :payment:build :schedule-reservation-ticketing:build --stacktrace -Dlogging.level.org.springframework.boot.context.config=DEBUG