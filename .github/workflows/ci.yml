# 워크플로우의 이름을 정의합니다.
name: Java CI with Gradle

# 워크플로우가 언제 실행될지를 정의합니다.
on:
  # main 또는 develop 브랜치에 push 이벤트가 발생했을 때 실행됩니다.
  push:
    branches: [ "main", "develop" ]
  # main, develop 브랜치 대상으로 pull request 이벤트가 발생했을 때 실행됩니다.
  pull_request:
    branches: [ "main", "develop" ]

# 실행될 작업(job)들을 정의합니다.
jobs:
  # 모든 모듈을 빌드하고 테스트하는 작업입니다.
  build-and-test:
    # 작업이 실행될 가상 환경을 지정합니다.
    runs-on: ubuntu-latest

    # 작업 내에서 순차적으로 실행될 단계(step)를 정의합니다.
    steps:
      # 1. 'actions/checkout' 액션을 사용하여 현재 레포지토리의 코드를 가상 환경으로 내려받습니다.
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. 'actions/setup-java' 액션을 사용하여 JDK 21을 설정합니다.
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      # 3. gradlew 스크립트에 실행 권한을 부여합니다.
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      # 4. 'payment' 모듈의 설정 파일을 Secret 값으로 생성합니다.
      - name: Create configuration files for payment module
        run: |
          mkdir -p ./payment/src/main/resources
          cat <<'EOF' > ./payment/src/main/resources/application.yml
          ${{ secrets.PAYMENT_APPLICATION_YML }}
          EOF
          cat <<'EOF' > ./payment/src/main/resources/application-dev.yml
          ${{ secrets.PAYMENT_APPLICATION_DEV_YML }}
          EOF
          cat <<'EOF' > ./payment/src/main/resources/application-dev-db.yml
          ${{ secrets.PAYMENT_APPLICATION_DEV_DB_YML }}
          EOF

      # 5. 'schedule-reservation-ticketing' 모듈의 설정 파일을 Secret 값으로 생성합니다.
      - name: Create configuration files for schedule-reservation-ticketing module
        run: |
          mkdir -p ./schedule-reservation-ticketing/src/main/resources
          cat <<'EOF' > ./schedule-reservation-ticketing/src/main/resources/application.yml
          ${{ secrets.SRT_APPLICATION_YML }}
          EOF
          cat <<'EOF' > ./schedule-reservation-ticketing/src/main/resources/application-dev-mail.yml
          ${{ secrets.SRT_APPLICATION_DEV_MAIL_YML }}
          EOF
          cat <<'EOF' > ./schedule-reservation-ticketing/src/main/resources/application-dev-db.yml
          ${{ secrets.SRT_APPLICATION_DEV_DB_YML }}
          EOF
          mkdir -p ./schedule-reservation-ticketing/src/test/resources
          cat <<'EOF' > ./schedule-reservation-ticketing/src/test/resources/application-test.yml
          ${{ secrets.SRT_APPLICATION_TEST_YML }}
          EOF

      # 6. 모든 모듈의 YAML 파일 유효성을 검사합니다.
      - name: Validate YAML files
        run: |
          for file in $(find ./payment ./schedule-reservation-ticketing -name "*.yml"); do
            echo "Validating $file ..."
            python3 -c "import yaml, sys; yaml.safe_load(open('$file'))" || exit 1
          done

      # 7. Gradle을 사용하여 모든 모듈을 빌드하고 테스트를 실행합니다.
      - name: Build and test all modules with Gradle
        run: ./gradlew clean :payment:build :schedule-reservation-ticketing:build  --stacktrace

      # 8. 테스트 실패 시 테스트 리포트를 업로드합니다.
      - name: Upload Test Report
        if: failure() # 작업이 실패했을 때만 실행
        uses: actions/upload-artifact@v4
        with:
          name: test-report # 아티팩트 이름
          path: schedule-reservation-ticketing/build/reports/tests/test/ # 로그에 나온 경로
